// command line syntax : node -e 'require("./app.js").problem1()'

const problems = {
  problem1: function () {
    // If we list all the natural numbers below 10 that are multiples of 3 or 5,
    // we get 3, 5, 6, and 9. The sum of these multiples is 23.
    //
    // Find the sum of all the multiples of 3 or 5 below 1000.
    let answer = 0;
    for (let naturalNumber = 1; naturalNumber < 1000; naturalNumber++) {
      if (naturalNumber % 3 == 0 || naturalNumber % 5 == 0) {
        answer += naturalNumber;
      }
    }
    console.log("Problem 1: " + answer);
  },

  problem2: function () {
    // Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    // By starting with 1 and 2 , the first 10 terms will be:
    //        1, 2, 3, 4, 5, 8, 13, 21, 34, 55, 89,...
    //
    // By considering the terms in the Fibonacci sequence whose values do not exceed
    // four million, find the sum of the even-valued terms.
    let answer = 2;
    let fibonacciTerms = [1, 2];
    let newTerm = fibonacciTerms.slice(-1)[0] + fibonacciTerms.slice(-2)[0];
    while (newTerm <= 4000000) {
      fibonacciTerms.push(newTerm);
      if (newTerm % 2 == 0) {
        answer += newTerm;
      }

      newTerm = fibonacciTerms.slice(-1)[0] + fibonacciTerms.slice(-2)[0];
    }
    console.log("Problem 2: " + answer);
  },

  // cmd: node -e 'console.log(require("./app.js").factors(600851475143))'
  factors: function (n) {
    // Collect factors as discovered
    let returnObject = {
      factors: [],
      primeFactors: [],
    };
    // Find numbers, starting at two, that divide the input number
    // with 0 remainder
    for (let test = 2; test < n; test++) {
      if (n % test == 0) {
        let result = n / test;
        // "test" is a factor of n so add it to the collection
        returnObject.factors.push(test);
        // the result of the factor test is also a factor of n, add it.
        returnObject.factors.push(result);
        // Determine what are the factores of our new factors, these will aslo be factors of n
        let testResults = problems.factors(test);
        let resultResults = problems.factors(result);
        // Merge the data into the return object
        returnObject.factors = returnObject.factors.concat(testResults.factors);
        returnObject.primeFactors = returnObject.primeFactors.concat(
          testResults.primeFactors
        );
        returnObject.factors = returnObject.factors.concat(
          resultResults.factors
        );
        returnObject.primeFactors = returnObject.primeFactors.concat(
          resultResults.primeFactors
        );

        // No need to continue the loop, other factors will be discovered
        // by the nested "factors" calls
        break;
      }
    }

    // n is prime if returnObject.factors is empty
    if (returnObject.factors.length == 0) {
      returnObject.primeFactors.push(n);
    }
    // de-duplicate
    let ddFactors = [];
    returnObject.factors.forEach((f) => {
      if (!ddFactors.includes(f)) ddFactors.push(f);
    });
    returnObject.factors = ddFactors;
    // de-duplicate
    let ddPrimeFactors = [];
    returnObject.primeFactors.forEach((f) => {
      if (!ddPrimeFactors.includes(f)) ddPrimeFactors.push(f);
    });
    returnObject.primeFactors = ddPrimeFactors;
    // Send the Object back
    return returnObject;
  },

  //cmd: node -e 'require("./app.js").problem3(600851475143)'
  problem3: function (n) {
    // The prime factors of 13195 are 5, 7, 13, and 29.
    //
    // What is the largest prime factor of the number 600851475143?
    let answer = 0;
    let objFactors = problems.factors(n);
    objFactors.primeFactors.forEach((pf) => {
      if (pf > answer) answer = pf;
    });

    console.log("Problem 3: " + answer);
  },
};
module.exports = problems;
